generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PoolTableStatus {
  Available
  Occupied
  Maintenance
}

enum PoolTableLightStatus {
  ON
  OFF
}

model PoolTables {
  id           Int                  @id @default(autoincrement())
  name         String
  light_pin    String
  light_status PoolTableLightStatus @default(OFF)
  hourly_rate  Decimal              @default(0)
  status       PoolTableStatus      @default(Available)
  PoolBookings PoolBookings[]

  @@map("pool_tables")
}

enum BookingStatus {
  Reserved
  InProgress
  Completed
  Cancelled
}

model PoolBookings {
  id            Int           @id @default(autoincrement())
  customer_name String?
  tableId       Int
  poolTable     PoolTables    @relation(fields: [tableId], references: [id])
  startTime     DateTime
  endTime       DateTime?
  durationHours Float?
  hourlyRate    Float
  totalPrice    Float?
  status        BookingStatus @default(Reserved)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payments      Payment[]

  @@map("pool_bookings")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Decimal
  categoryId  Int
  imgurl      String?
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

enum OrderStatus {
  Pending
  Paid
  Processing
  Completed
  Cancelled
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String?
  totalAmount Decimal
  status      OrderStatus @default(Pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  payments    Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  notes     String?

  @@map("order_items")
}

enum PaymentStatus {
  Pending
  Success
  Failed
  Cancelled
  Expired
  Challenge
}

enum PaymentType {
  Order
  Booking
}

model Payment {
  id                  Int           @id @default(autoincrement())
  orderId             Int?
  order               Order?        @relation(fields: [orderId], references: [id])
  bookingId           Int?
  booking             PoolBookings? @relation(fields: [bookingId], references: [id])
  paymentType         PaymentType
  amount              Decimal
  status              PaymentStatus @default(Pending)
  midtransOrderId     String        @unique
  midtransToken       String?
  midtransRedirectUrl String?
  transactionId       String?
  paymentMethod       String?
  paidAt              DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("payments")
}

